diff --git a/node_modules/node-java-connector/dist/index.d.ts b/node_modules/node-java-connector/dist/index.d.ts
index 82139cd..c6e04e8 100644
--- a/node_modules/node-java-connector/dist/index.d.ts
+++ b/node_modules/node-java-connector/dist/index.d.ts
@@ -42,4 +42,14 @@ export declare function install(version?: number, options?: any): Promise<any>;
  * @returns {Promise<ChildProcess>}
  */
 export declare function executeJar(jarPath: string, args?: string[]): Promise<ChildProcess>;
+/**
+ * Runs a jar with classpath at the given path
+ *
+ * @export
+ * @param {string} jarPath path to the jar-file which should be executed
+ * @param {string} classPath classpath parameter for fully-qualified class name
+ * @param {string[]} [args] optional arguments that will be appended while executing
+ * @returns {Promise<ChildProcess>}
+ */
+export declare function executeJarCP(jarPath: string, classPath: string, args?: string[]): Promise<ChildProcess>;
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/node-java-connector/dist/index.js b/node_modules/node-java-connector/dist/index.js
index 496f4a5..57759d8 100644
--- a/node_modules/node-java-connector/dist/index.js
+++ b/node_modules/node-java-connector/dist/index.js
@@ -207,6 +207,54 @@ function executeJar(jarPath, args) {
     });
 }
 exports.executeJar = executeJar;
+/**
+ * Runs a jar with classpath at the given path
+ *
+ * @export
+ * @param {string} jarPath path to the jar-file which should be executed
+ * @param {string} classPath classpath parameter for fully-qualified class name
+ * @param {string[]} [args] optional arguments that will be appended while executing
+ * @returns {Promise<ChildProcess>}
+ */
+function executeJarCP(jarPath, classPath, args) {
+    return __awaiter(this, void 0, void 0, function () {
+        var javaCall, javaExists, argumentString, output;
+        var _this = this;
+        return __generator(this, function (_a) {
+            switch (_a.label) {
+                case 0:
+                    javaCall = "";
+                    javaExists = false;
+                    return [4 /*yield*/, findJavaHome({ allowJre: true }, function (err, home) { return __awaiter(_this, void 0, void 0, function () {
+                            return __generator(this, function (_a) {
+                                if (err)
+                                    return [2 /*return*/, console.log(err)];
+                                // Then we can just call "java" in the console
+                                if (!!home && home !== "") {
+                                    javaExists = true;
+                                    javaCall = "java";
+                                }
+                                return [2 /*return*/];
+                            });
+                        }); })];
+                case 1:
+                    _a.sent();
+                    if (!javaExists) {
+                        javaCall = getJavaString();
+                    }
+                    argumentString = !args ? "" : args.map(function (str) { return "'" + str + "'"; }).join(' ');
+                    output = child_process_1.exec(javaCall + " -cp " + jarPath + " " + classPath + " " + argumentString);
+                    if (!!output.stderr) {
+                        output.stderr.on("data", function (stderr) {
+                            console.error("" + stderr);
+                        });
+                    }
+                    return [2 /*return*/, output];
+            }
+        });
+    });
+}
+exports.executeJarCP = executeJarCP;
 function getJavaString() {
     var srcPath = path.join(path.resolve(__dirname), '../', constants_1.jrePath);
     var files = fs_1.readdirSync(srcPath);
